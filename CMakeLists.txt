cmake_minimum_required(VERSION 3.2 FATAL_ERROR)
project(date VERSION 2.1 LANGUAGES CXX)

if(${CMAKE_SOURCE_DIR} STREQUAL ${CMAKE_CURRENT_SOURCE_DIR})
	set(NEED_PARENT Off)
	set(DATE_DEFAULT_ENABLE_TESTS On)
else()
	set(NEED_PARENT On)
	set(DATE_DEFAULT_ENABLE_TESTS Off)
endif()

option(DATE_ENABLE_TESTS "Build unit tests" ${DATE_DEFAULT_ENABLE_TESTS})
option(DATE_NO_TZ        "Disable building Time Zone static library" Off)
if(NOT DATE_NO_TZ)
	option(DATE_TZ_NO_TZMAP  "Disable Time Zone name mapping on Windows" Off)
	option(DATE_TZ_NO_TZFILE "Disable reading zoneinfo tzfiles" Off)
	option(DATE_TZ_NO_TZRULE "Disable reading IANA Time Zone rules" Off)
	option(DATE_TZ_NO_LAZY   "Disable lazy initialization of time zones" Off)
	option(DATE_TZ_DEFAULT_FILE "Use tzfile_zone as time_zone")
	option(DATE_TZ_DEFAULT_RULE "Use tzrule_zone as time_zone")
	if(NOT DATE_TZ_NO_TZRULE)
		option(DATE_TZ_NO_REMOTE "Disable using cURL to download IANA Time Zone rules" Off)
		option(DATE_TZ_NO_SHELL  "Disable using shell programs to manage IANA Time Zone rules" Off)
	endif()
endif()

message(STATUS "Using ${CMAKE_CXX_COMPILER} (compiler id: ${CMAKE_CXX_COMPILER_ID})")
if ("${CMAKE_CXX_COMPILER_ID}" MATCHES ".*Clang")
	if(NOT "${CMAKE_CXX_FLAGS}" MATCHES "-stdlib")
		set(CMAKE_CXX_FLAGS "-std=c++14 -stdlib=libc++ ${CMAKE_CXX_FLAGS}")
	endif()
endif ()
if(NOT NEED_PARENT)
	if("${CMAKE_CXX_COMPILER_ID}" MATCHES ".*Clang" OR "${CMAKE_CXX_COMPILER_ID}" STREQUAL "Gnu")
		set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall -Werror")
	endif()
endif()

if(NEED_PARENT)
	set(DATE_INCLUDES ${CMAKE_CURRENT_SOURCE_DIR} PARENT_SCOPE)
endif()

if(NOT DATE_NO_TZ)
	if(DATE_TZ_DEFAULT_FILE)
		add_definitions(-DTIMEZONE_DEFAULT=0)
	elseif(DATE_TZ_DEFAULT_RULE)
		add_definitions(-DTIMEZONE_DEFAULT=1)
	endif()
	if(WIN32)
		add_definitions(-DDATE_BUILD_LIB=1)
		if(DATE_TZ_NO_TZMAP)
			add_definitions(-DTIMEZONE_MAPPING=0)
		else()
			add_definitions(-DTIMEZONE_MAPPING=1)
			add_definitions(-DTIMEZONE_RULES=1)
			set(DATE_NEEDS_REMOTE On)
			set(DATE_NEEDS_SHELL On)
		endif()
	else()
		if(DATE_TZ_NO_TZFILE)
			add_definitions(-DTIMEZONE_FILES=0)
			add_definitions(-DTIMEZONE_RULES=1)
			set(DATE_NEEDS_REMOTE On)
			set(DATE_NEEDS_SHELL On)
		else()
			add_definitions(-DTIMEZONE_FILES=1)
			set(DATE_NEEDS_TZFILE On)
			if(DATE_ENABLE_TESTS AND NOT DATE_TZ_NO_TZRULE)
				add_definitions(-DTIMEZONE_RULES=1)
				set(DATE_NEEDS_REMOTE On)
				set(DATE_NEEDS_SHELL On)
			else()
				add_definitions(-DTIMEZONE_RULES=0)
				set(DATE_NEEDS_REMOTE Off)
				set(DATE_NEEDS_SHELL Off)
			endif()
		endif()
	endif()
	if(DATE_TZ_NO_LAZY)
		add_definitions(-DLAZY_INIT=0)
	else()
		add_definitions(-DLAZY_INIT=1)
	endif()

	
	set(DATE_INC ${CMAKE_CURRENT_SOURCE_DIR})

	if(DATE_NEEDS_TZFILE)
		foreach(CHECK
			${DATE_TZFILE_DIR}
			"${CMAKE_INSTALL_PREFIX}/share/zoneinfo"
			"/usr/share/zoneinfo"
			"/usr/local/share/zoneinfo"
			"${CMAKE_INSTALL_PREFIX}/etc/zoneinfo"
			"/usr/etc/zoneinfo"
			"/usr/local/etc/zoneinfo"
		)
			if(CHECK AND EXISTS ${CHECK})
				set(DATE_TZFILE_DIR ${CHECK})
				break()
			endif()
		endforeach()
		if(DATE_TZFILE_DIR)
			message(STATUS "Date: using zoneinfo files at ${DATE_TZFILE_DIR}")
			add_definitions(-DTZDIR="${DATE_TZFILE_DIR}")
			if(NOT EXISTS "${DATE_TZFILE_DIR}/right/UTC")
				message(WARNING "Date: could not find ${DATE_TZFILE_DIR}/right/UTC! This is needed to calculate leapseconds with tzfiles. You may want to use tzrules by calling add_definitions(-DTIMEZONE_DEFAULT=1)")
			endif()
		else()
			message(WARNING "Date: could not find zoneinfo files! Using default of /usr/share/zoneinfo")
		endif()
	endif()
	if(NOT DATE_TZ_NO_REMOTE AND DATE_NEEDS_REMOTE)
		find_package(CURL)

		if(CURL_FOUND)
			message(STATUS "Date: Found cURL. Explicitly enabling HAS_REMOTE_API")
			add_definitions(-DHAS_REMOTE_API=1)
			add_definitions(-DAUTO_DOWNLOAD=1)
			set(DATE_INC ${DATE_INC} ${CURL_INCLUDE_DIRS})
			set(TZLINKS ${CURL_LIBRARIES})
		else()
			message(WARNING "Date: Couldn't find cURL. Disabling HAS_REMOTE_API")
			add_definitions(-DHAS_REMOTE_API=0)
			add_definitions(-DAUTO_DOWNLOAD=0)
		endif()
	else()
		set(TZLINKS "")
		add_definitions(-DHAS_REMOTE_API=0)
		add_definitions(-DAUTO_DOWNLOAD=0)
	endif()
	
	if(NOT DATE_TZ_NO_SHELL AND DATE_NEEDS_SHELL)
		if(WIN32)
			find_program(SHELL_REMOVE_DIRECTORY "rd")
			find_program(SHELL_REMOVE_FILE "del")
			find_program(SHELL_MOVE_FILE "move")
			find_program(SHELL_UNTAR "7z.exe" PATHS "$ENV{ProgramFiles}/7-Zip")
		else()
			find_program(SHELL_REMOVE_DIRECTORY "rm")
			find_program(SHELL_REMOVE_FILE "rm")
			find_program(SHELL_MOVE_FILE "mv")
			find_program(SHELL_UNTAR "tar")
		endif()
		find_program(SHELL_MAKE_DIRECTORY "mkdir")
		if(SHELL_REMOVE_DIRECTORY AND SHELL_REMOVE_FILE AND SHELL_MOVE_FILE AND SHELL_UNTAR AND SHELL_MAKE_DIRECTORY)
			message(STATUS "Date: Found all programs for USE_SHELL_API. Enabling Shell API.")
			add_definitions(-DUSE_SHELL_API=1)
		else()
			message(WARNING "Date: Could not find all programs for USE_SHELL_API. Not enabling or disabling Shell API.")
		endif()
	else()
		add_definitions(-DUSE_SHELL_API=0)
	endif()

	add_library(date-tz STATIC tz.cpp)

	target_link_libraries(date-tz ${TZLINKS})

	set_property(TARGET date-tz PROPERTY CXX_STADARD 14)

	if(NEED_PARENT)
		set(DATE_TZ_INCLUDES ${DATE_INC} PARENT_SCOPE)
		set(DATE_TZ_LIBS ${TZLINKS} date-tz PARENT_SCOPE)
	else()
		set(DATE_TZ_LIBS ${TZLINKS} date-tz)
	endif()
	if(DATE_ENABLE_TESTS)	
		enable_testing()

		if(NOT DATE_TZ_NO_TZRULE)
			add_definitions(-DTIMEZONE_RULES=1)
		endif()
		include_directories(${CMAKE_SOURCE_DIR} ${CMAKE_SOURCE_DIR}/test)
		add_executable(validate test/tz_test/validate.cpp)

		target_link_libraries(validate ${DATE_TZ_LIBS})
		
		if(NOT DATE_TZ_NO_TZRULE)
			add_test(validate_rules validate tzrule)
		endif()
		if(NOT DATE_TZ_NO_TZFILE)
			add_test(validate_files validate tzfile)
		endif()
		add_test(validate_time_zone validate)
		if(NOT MSVC)
			set(DATE_TZ_DO_FAIL_PASS On)
		elseif(${MSVC_VERSION} GREATER 1910)
			set(DATE_TZ_DO_FAIL_PASS On)
		endif()
		if(DATE_TZ_DO_FAIL_PASS)
			file(GLOB_RECURSE DATE_STATIC_TESTS RELATIVE ${CMAKE_SOURCE_DIR}/test/ *.fail.cpp)
			foreach(source_file ${DATE_STATIC_TESTS})
				string(REPLACE "." "_" source_target ${source_file})
				string(REPLACE "/" "_" source_target ${source_target})
				string(REPLACE "\\" "_" source_target ${source_target})
				string(REPLACE "_cpp" "" source_target ${source_target})
				add_executable(${source_target} ${CMAKE_SOURCE_DIR}/test/${source_file})
				target_link_libraries(${source_target} ${DATE_TZ_LIBS})
			endforeach()
			file(GLOB_RECURSE DATE_RUNTIME_TESTS RELATIVE ${CMAKE_SOURCE_DIR}/test/ *.pass.cpp)
			foreach(source_file ${DATE_RUNTIME_TESTS})
				string(REPLACE "." "_" source_target ${source_file})
				string(REPLACE "/" "_" source_target ${source_target})
				string(REPLACE "\\" "_" source_target ${source_target})
				string(REPLACE "_cpp" "" source_target ${source_target})
				add_executable(${source_target} ${CMAKE_SOURCE_DIR}/test/${source_file})
				target_link_libraries(${source_target} ${DATE_TZ_LIBS})
				add_test(${source_target} ${source_target})
			endforeach()
		endif()
	endif()
endif()
